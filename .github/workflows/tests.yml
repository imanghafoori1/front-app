name: Tests

on:
  push:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
    branches: ["main"]

jobs:
  Setup:
    name: Setup
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      DB_DATABASE: laravel
      DB_USERNAME: root
      DB_PASSWORD: password
      TELESCOPE_ENABLED: false
      MICROSCOPE_ENABLED: true
      CACHE_DRIVER: array
      QUEUE_CONNECTION: database
      SESSION_DRIVER: cookie
      SESSION_LIFETIME: 120
      LOG_CHANNEL: null
      LOG_LEVEL: debug
      APP_ENV: testing
      APP_URL: ${{ secrets.APP_URL }}
      APP_BASE: ${{ secrets.APP_BASE }}
      APP_DOMAIN: ${{ secrets.APP_DOMAIN }}
      APP_KEY: ${{ secrets.APP_KEY }}
      SESSION_DOMAIN: ${{ secrets.SESSION_DOMAIN }}

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: false
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: laravel
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis
        ports:
          - 6379/tcp
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    strategy:
      fail-fast: false
      matrix:
        php-versions: ["8.4"]

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 1

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, mysql, mysqli, pdo_mysql, bcmath, soap, intl, gd, exif, iconv, pcov
          ini-values: pcov.directory=.
          coverage: PCOV

      # Checks the composer.lock and the composer.json are in sync
      - name: Validate composer.json and composer.lock
        run: composer validate

      - name: Cache Composer dependencies
        id: cache-vendor
        uses: actions/cache@v4
        with:
          path: ./vendor
          key: composer-${{ hashFiles('**/composer.lock') }}
          # In case of cache miss, restore the previous vendor
          # folder and continue the installation from that...
          restore-keys: composer-

      - name: create .env file
        run: touch .env # create empty .env file to avoid phpunit warnings.

      - name: Install Composer dependencies
        if: steps.cache-vendor.outputs.cache-hit != 'true' # Skip if cache hit
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-suggest --no-progress --prefer-dist

      - name: Run Migration
        run: php artisan migrate --force
        env:
          DB_PORT: ${{ job.services.mysql.ports['3306'] }}
          TELESCOPE_DB_PORT: ${{ job.services.mysql.ports['3306'] }}

      - name: Test APIs with phpunit
        if: success()
        run: php artisan test --compact --profile --coverage-clover=clover.xml
        env:
          DB_PORT: ${{ job.services.mysql.ports['3306'] }}

      - name: Upload coverage to Coveralls
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_TOKEN }}
        run: |
          composer global require php-coveralls/php-coveralls
          php-coveralls --coverage_clover=clover.xml --json_path=./coverall.xml -v
